# **Testing the Automata API**

This document presents theoretical test cases to validate the endpoints of the Automata API (DFA, DPDA, and DTM). Tests can be conducted using Postman, cURL, or a Python script with `requests`.

---

## **1. Tests for DFA (Deterministic Finite Automaton)**

### **Case 1: Accepted Input**

json

{
  "states": ["q0", "q1", "q2"],
  "input_symbols": ["0", "1"],
  "transitions": {
    "q0": {"0": "q0", "1": "q1"},
    "q1": {"0": "q0", "1": "q2"},
    "q2": {"0": "q2", "1": "q1"}
  },
  "initial_state": "q0",
  "final_states": ["q1"],
  "input": "101"
}


** Expected:** `accepted: true`

### **‚ùå Case 2: Rejected Input**

json

{
  "states": ["q0", "q1", "q2"],
  "input_symbols": ["0", "1"],
  "transitions": {
    "q0": {"0": "q0", "1": "q1"},
    "q1": {"0": "q0", "1": "q2"},
    "q2": {"0": "q2", "1": "q1"}
  },
  "initial_state": "q0",
  "final_states": ["q1"],
  "input": "100"
}


** Expected:** `accepted: false`

### ** Case 3: Edge Case - Empty Input**

json

{
  "states": ["q0"],
  "input_symbols": [],
  "transitions": {},
  "initial_state": "q0",
  "final_states": ["q0"],
  "input": ""
}


** Expected:** `accepted: true`



## **2. Tests for DPDA (Deterministic Pushdown Automaton)**

### ** Case 1: Balanced Input (Ex: aabb)**

json

{
  "states": ["q0", "q1", "q2", "q3"],
  "input_symbols": ["a", "b"],
  "stack_symbols": ["0", "1"],
  "transitions": {
    "q0": {"a": {"0": ["q1", ["1", "0"]]}},
    "q1": {"a": {"1": ["q1", ["1", "1"]]}, "b": {"1": ["q2", []]}},
    "q2": {"b": {"1": ["q2", []]}, "": {"0": ["q3", ["0"]]}}
  },
  "initial_state": "q0",
  "initial_stack_symbol": "0",
  "final_states": ["q3"],
  "input": "aabb"
}


** Expected:** `accepted: true`

### ** Case 2: Unbalanced Input (Ex: aab)**

json

{
  "input": "aab"
}

** Expected:** `accepted: false`

---

## **3. Tests for DTM (Deterministic Turing Machine)**

### ** Case 1: Valid Input (Ex: 0011 - same number of 0s and 1s)**

json
{

  "states": ["q0", "q1", "q2", "q3", "q4"],
  "input_symbols": ["0", "1"],
  "tape_symbols": ["0", "1", "x", "y", "."],
  "transitions": {
    "q0": {"0": ["q1", "x", "R"], "y": ["q3", "y", "R"]},
    "q1": {"0": ["q1", "0", "R"], "1": ["q2", "y", "L"], "y": ["q1", "y", "R"]},
    "q2": {"0": ["q2", "0", "L"], "x": ["q0", "x", "R"], "y": ["q2", "y", "L"]},
    "q3": {"y": ["q3", "y", "R"], ".": ["q4", ".", "R"]}
  },
  "initial_state": "q0",
  "blank_symbol": ".",
  "final_states": ["q4"],
  "input": "0011"
}


** Expected:** `accepted: true`

### ** Case 2: Invalid Input (Ex: 0001 - unbalanced 0s and 1s)**

json

{
  "input": "0001"
}

**Expected:** `accepted: false`

